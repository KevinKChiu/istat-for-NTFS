import unittest
from subprocess import run

import istat_ntfs
import tsk_helper

# from gradescope_utils.autograder_utils.decorators import weight


FILENAME = "istat_ntfs.py"


from datetime import datetime as dt


def jaccard_distance(x, y):
    x = set(x)
    y = set(y)
    return len(x & y) / len(x | y)


class TestFormatting(unittest.TestCase):
    # @weight(5)
    def test_part0_black(self):
        p = run(["black", "--line-length", "110", "--quiet", "--check", FILENAME])
        self.assertEqual(
            p.returncode,
            0,
            f"Black return code of {p.returncode} (rather than 0) indicates a problem.",
        )

    # @weight(5)
    def test_part0_isort(self):
        p = run(
            [
                "isort",
                "--profile",
                "black",
                "--quiet",
                "--check-only",
                FILENAME,
            ]
        )
        self.assertEqual(
            p.returncode,
            0,
            f"isort return code of {p.returncode} (rather than 0) indicates a problem.",
        )

    # @weight(5)
    def test_part0_flake8(self):
        p = run(
            [
                "flake8",
                "--max-line-length=110",
                "--ignore=E203,W503,E501",
                "--quiet",
                "--quiet", #yes, twice
                "--select=F,N",
                FILENAME,
            ]
        )
        self.assertEqual(
            p.returncode,
            0,
            f"flake8 return code of {p.returncode} (rather than 0) indicates a problem.",
        )


class TestIstatNtfs(unittest.TestCase):
    def __init__(self, methodName="runTest"):  # noqa
        super().__init__(methodName)
        self.fractional_score = {}

    # @weight(20)
    def test_header_parse(self):
        self.maxDiff = None
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
        entry = b"FILE0\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x008\x00\x01\x00\x98\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00`\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00H\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00h\x00\x00\x00\x00\x00\x18\x00\x00\x00\x02\x00J\x00\x00\x00\x18\x00\x01\x00\x05\x00\x00\x00\x00\x00\x05\x00\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00l\x00\x00\x00\x00\x00\x00\x00l\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04\x03$\x00M\x00F\x00T\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x11K\x10\x00\x00\x00\x00\x00\xb0\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x01\x08\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"  # noqa
        actual = mft.parse_entry_header(0, entry)
        expected = {
            "address": 0,
            "allocated": True,
            "logfile_seq_num": 0,
            "sequence": 1,
            "links": 1,
        }
        self.assertEqual(actual, expected)

    # @weight(20)
    def test_parse_std_info_attr(self):
        self.maxDiff = None
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
        expected = {
            "created": "1601-01-01 00:00:00.000000000 (EDT)",
            "modified": "1601-01-01 00:00:00.000000000 (EDT)",
            "mft_modified": "1601-01-01 00:00:00.000000000 (EDT)",
            "accessed": "1601-01-01 00:00:00.000000000 (EDT)",
            "flags": 6,
            "std_info_size": 72,
            "std_info_end": 152,
        }
        entry = b"FILE0\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x008\x00\x01\x00\x98\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00`\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00H\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00h\x00\x00\x00\x00\x00\x18\x00\x00\x00\x02\x00J\x00\x00\x00\x18\x00\x01\x00\x05\x00\x00\x00\x00\x00\x05\x00\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00l\x00\x00\x00\x00\x00\x00\x00l\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04\x03$\x00M\x00F\x00T\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x11K\x10\x00\x00\x00\x00\x00\xb0\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x01\x08\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"  # noqa
        actual = mft.parse_std_info_attr(entry, 56)
        self.assertEqual(actual, expected)

    # @weight(30)
    def test_parse_file_name_attr(self):
        self.maxDiff = None
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)

        expected = {
            "name": "$MFT",
            "parent": 5,
            "sequence": 5,
            "allocated_size": 27648,
            "actual_size": 27648,
            "created": "2017-04-07 19:04:24.000000000 (EDT)",
            "modified": "2017-04-07 19:04:24.000000000 (EDT)",
            "mft_modified": "2017-04-07 19:04:24.000000000 (EDT)",
            "accessed": "2017-04-07 19:04:24.000000000 (EDT)",
            "file_name_size": 74,
            "file_name_end": 256,
            "flags": 6,
        }
        entry = b"FILE0\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x008\x00\x01\x00\x98\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00`\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00H\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00h\x00\x00\x00\x00\x00\x18\x00\x00\x00\x02\x00J\x00\x00\x00\x18\x00\x01\x00\x05\x00\x00\x00\x00\x00\x05\x00\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00LYL\xf3\xaf\xd2\x01\x00l\x00\x00\x00\x00\x00\x00\x00l\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04\x03$\x00M\x00F\x00T\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x11K\x10\x00\x00\x00\x00\x00\xb0\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x01\x08\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"  # noqa
        actual = mft.parse_file_name_attr(entry, 152)
        self.assertEqual(actual, expected)

    # @weight(10)
    def test_parse_data_resident(self):
        self.maxDiff = None
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
        entry = b"FILE0\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x008\x00\x01\x00\xf0\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00\x05\x00er\x00\x00\x00\x00\x10\x00\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x18\x00\x00\x00sX\xb1L\xf3\xaf\xd2\x01D`\xb1L\xf3\xaf\xd2\x01D`\xb1L\xf3\xaf\xd2\x01sX\xb1L\xf3\xaf\xd2\x01 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00x\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00`\x00\x00\x00\x18\x00\x01\x00\x05\x00\x00\x00\x00\x00\x05\x00sX\xb1L\xf3\xaf\xd2\x01sX\xb1L\xf3\xaf\xd2\x01sX\xb1L\xf3\xaf\xd2\x01sX\xb1L\xf3\xaf\xd2\x01p\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x0f\x00l\x00o\x00r\x00e\x00m\x00_\x00i\x00p\x00s\x00u\x00m\x00.\x00t\x00x\x00t\x00P\x00\x00\x00h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00P\x00\x00\x00\x18\x00\x00\x00\x01\x00\x04\x80\x14\x00\x00\x00$\x00\x00\x00\x00\x00\x00\x004\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 \x02\x00\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 \x02\x00\x00\x02\x00\x1c\x00\x01\x00\x00\x00\x00\x03\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x80\x00\x00\x00\x88\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00n\x02\x00\x00\x18\x00\x00\x00Lorem ipsum dolor sit amet, pro quas malorum discere ei, quod scaevola\ndefinitiones nec cu, in iriure fierent nam. Cum ea officiis gubergren, ut\nper liber eleifend consulatu. An eam facer decore saperet, est lorem\nfacilis te. Nam in facilisi rationibus complectitur. Et eum utinam iuvaret\nomnesque, nonumes constituto ius cu, mazim partem dissentiunt id vim.\n\nEos ea laudem scaevola vituperata. Nisl habeo partiendo at usu. Ut error\nomnes salutandi mei. Et velit voluptua maiestatis cum, oratio offendit id\nusu, fierent omittam persequeris est eu. Viris cotidieque intellegebat qui\nid. Cum harum reprimique scribentur et.\n\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"  # noqa
        expected = {"type": 128, "size": 622}
        actual = mft.parse_data_attr(entry, 248)
        self.assertEqual(actual, expected)

    # @weight(30)
    def test_parse_data_non_resident(self):
        self.maxDiff = None
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
        # fmt: off
        expected = {'type': 128, 'size': 30918, 'init_size': 30918, 'sector_list': [2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185]}# noqa
        # fmt: on

        entry = b"FILE0\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x008\x00\x01\x00\xa8\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00F\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x18\x00\x00\x00\xd5\xae\xe5L\xf3\xaf\xd2\x01O\xb9\xe5L\xf3\xaf\xd2\x01O\xb9\xe5L\xf3\xaf\xd2\x01\xd5\xae\xe5L\xf3\xaf\xd2\x01 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00X\x00\x00\x00\x18\x00\x01\x00B\x00\x00\x00\x00\x00\x01\x00\xd5\xae\xe5L\xf3\xaf\xd2\x01\xd5\xae\xe5L\xf3\xaf\xd2\x01\xd5\xae\xe5L\xf3\xaf\xd2\x01\xd5\xae\xe5L\xf3\xaf\xd2\x01\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x0b\x00c\x00o\x00m\x00m\x00e\x00n\x00t\x00.\x00p\x00n\x00g\x00P\x00\x00\x00h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00P\x00\x00\x00\x18\x00\x00\x00\x01\x00\x04\x80\x14\x00\x00\x00$\x00\x00\x00\x00\x00\x00\x004\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 \x02\x00\x00\x01\x02\x00\x00\x00\x00\x00\x05 \x00\x00\x00 \x02\x00\x00\x02\x00\x1c\x00\x01\x00\x00\x00\x00\x03\x14\x00\xff\x01\x1f\x00\x01\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x80\x00\x00\x00H\x00\x00\x00\x01\x00@\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\xc6x\x00\x00\x00\x00\x00\x00\xc6x\x00\x00\x00\x00\x00\x00!\x1fk\x08\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"  # noqa
        actual = mft.parse_data_attr(entry, 240)
        self.assertEqual(actual, expected)

    # @weight(5)
    def test_image64(self):

        print("Python program to demonstrate strftime() function using datetime module")
        now = dt.now()
        print("The current date and time without formatting is as follows:",now)
        s = now.strftime("%Z %z")
        print("This will display the timezone:", s)


        self.maxDiff = None
        with open("image.ntfs.64.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(64))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        if len(actual) < 2:
            self.fail()
        self.assertEqual(
            expected,
            actual,
            msg=f"\n{self.fractional_score[self._testMethodName]}{lines}",
        )

    # @weight(20)
    def test_image65(self):
        self.maxDiff = None
        with open("image.ntfs.65.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(65))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        # if len(expected) != len(actual):
        # self.fail()
        self.assertEqual(expected, actual)

    # @weight(5)
    def test_image67(self):
        self.maxDiff = None
        with open("image.ntfs.67.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(67))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        self.assertEqual(expected, actual)

    # @weight(5)
    def test_image68(self):
        self.maxDiff = None
        with open("image.ntfs.68.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(68))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        self.assertEqual(expected, actual)

    # @weight(5)
    def test_image69(self):
        self.maxDiff = None
        with open("image.ntfs.69.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(69))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        self.assertEqual(expected, actual)

    # @weight(5)
    def test_image70(self):
        self.maxDiff = None
        with open("image.ntfs.70.out") as f:
            expected = tsk_helper.strip_all(tsk_helper.get_fsstat_output(f))
        with open("image.ntfs", "rb") as f:
            mft = istat_ntfs.ParseMFT(f)
            lines = mft.print_istat_entry(mft.istat_entry(70))
            actual = tsk_helper.strip_all(lines.split("\n"))
        self.fractional_score[self._testMethodName] = jaccard_distance(expected, actual)
        self.assertEqual(expected, actual)


if __name__ == "__main__":
    unittest.main()
